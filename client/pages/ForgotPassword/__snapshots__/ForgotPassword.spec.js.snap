// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ForgotPasswordPage page should match snapshot 1`] = `
<ForgotPasswordPage
  dispatch={[Function]}
  history={
    Object {
      "push": [MockFunction],
    }
  }
>
  <HelmetWrapper
    defer={true}
    encodeSpecialCharacters={true}
  >
    <SideEffect(NullComponent)
      defer={true}
      encodeSpecialCharacters={true}
      title="Forgot Password"
      titleAttributes={Object {}}
    >
      <NullComponent
        defer={true}
        encodeSpecialCharacters={true}
        title="Forgot Password"
        titleAttributes={Object {}}
      />
    </SideEffect(NullComponent)>
  </HelmetWrapper>
  <ForgotPasswordForm
    dispatch={[Function]}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    initialValues={
      Object {
        "email": "",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "email",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
              "undefined": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <div
      className="container mx-auto flex justify-center"
    >
      <div
        className="max-w-md-1/2 mx-3 my-12 w-full"
      >
        <h1
          className="text-center font-primary font-semibold text-gold"
        >
          Forgot Password
        </h1>
        <div
          className="bg-white shadow-md my-12 p-16 rounded w-full"
        >
          <Formik
            enableReinitialize={false}
            initialValues={
              Object {
                "email": "",
              }
            }
            isInitialValid={false}
            onSubmit={[Function]}
            validateOnBlur={true}
            validateOnChange={true}
            validationSchema={
              ObjectSchema {
                "_blacklist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_conditions": Array [],
                "_defaultDefault": [Function],
                "_deps": Array [],
                "_excludedEdges": Array [],
                "_exclusive": Object {},
                "_mutate": undefined,
                "_nodes": Array [
                  "email",
                ],
                "_options": Object {
                  "abortEarly": true,
                  "recursive": true,
                },
                "_type": "object",
                "_typeError": [Function],
                "_whitelist": RefSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "fields": Object {
                  "email": StringSchema {
                    "_blacklist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_conditions": Array [],
                    "_deps": Array [],
                    "_exclusive": Object {
                      "required": true,
                      "undefined": false,
                    },
                    "_mutate": undefined,
                    "_options": Object {
                      "abortEarly": true,
                      "recursive": true,
                    },
                    "_type": "string",
                    "_typeError": [Function],
                    "_whitelist": RefSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "tests": Array [
                      [Function],
                      [Function],
                    ],
                    "transforms": Array [
                      [Function],
                    ],
                  },
                },
                "tests": Array [],
                "transforms": Array [
                  [Function],
                ],
              }
            }
          >
            <form
              onSubmit={[Function]}
            >
              <Textbox
                data-testid="email-field"
                name="email"
                onBlur={[Function]}
                onChange={[Function]}
                placeholder="Enter your email"
                type="email"
                value=""
              >
                <div
                  className="mb-5"
                >
                  <input
                    className="focus:outline-none w-full p-6 bg-brown-lightest text-brown"
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="Enter your email"
                    type="email"
                    value=""
                  />
                </div>
              </Textbox>
              <Button
                data-testid="submit-button"
                loading={false}
                type="submit"
              >
                <button
                  className="focus:outline-none rounded-sm hover:bg-emerald-light px-4 py-5 w-full text-white text-xl bg-emerald"
                  disabled={false}
                  type="submit"
                >
                  Send Password Reset Link
                </button>
              </Button>
            </form>
          </Formik>
        </div>
      </div>
    </div>
  </ForgotPasswordForm>
</ForgotPasswordPage>
`;
